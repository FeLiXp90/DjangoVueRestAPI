#Com base no tutorial de Django(REST API) + Vue.js do Leonardo Lourenco
#https://github.com/Leonardo-Lourenco/rest-api-django-vueJS

#Documentações:
'''
https://axios-http.com/ptbr/docs/intro
https://vuejs.org/guide/quick-start
https://nodejs.org/docs/latest/api/
https://tailwindcss.com/showcase
https://docs.djangoproject.com/en/5.2/
https://tutorial.djangogirls.org/en/deploy/
https://help.pythonanywhere.com/pages/
https://docs.docker.com/´
'''

#requirements.txt
#-------
Django==5.2.6
django-cors-headers==4.7.0
djangorestframework==3.16.1
django-environ==0.12.0
Pillow==11.3.0
#-------

#Criar um venv - virtual enviroments do python

python -m venv venv  #Criar o venv

venv\Scripts\Activate.ps1 #Ativa
deactive #Desativa

#Instalar Node.js
npm -v
node -v
# uma vez que esteja okay, use

npm install -g @vue/cli #para permiter criar o app frontend vue no PowerShell
vue --version #verifica

vue create frontend
'''
? Please pick a preset: Manually select features
? Check the features needed for your project: Babel, Router, CSS Pre-processors      
? Choose a version of Vue.js that you want to start the project with 3.x
? Use history mode for router? (Requires proper server setup for index fallback in production) No
? Pick a CSS pre-processor (PostCSS, Autoprefixer and CSS Modules are supported by default): Sass/SCSS (with dart-sass)
? Where do you prefer placing config for Babel, ESLint, etc.? In dedicated config files
? Save this as a preset for future projects? (y/N) N
'''

#npm install tailwindcss@npm:@tailwindcss/postcss postcss postcss@^8 autoprefixer@^9 (esse código não funciona mais pois a versão do autoprefixer foi atualiza e agora depende de postcss 8)
#Ignore - Usar tailwind e postcss para estilizar página
npm install -D postcss@^8 postcss-loader@^6 autoprefixer@^10 tailwindcss@^3.4
npm install axios
#axios para consumir dados da API

#frontend/src/MeuSite.vue
'''
<template>

    <div class="relative bg-gray-50 pt-16 pb-20 px-4 sm:px-6 lg:pt-24 lg:pb-28 lg:px-8">
        <div class="absolute inset-0">
            <div class="bg-white h-1/3 sm:h-2/3"> </div>
        </div>
        <div class="relative max-w-7x1 mx-auto">
            <div class="text-center">
                <h2 class="text-3x1 tracking-tight from-extrabold text-gray-900 sm:text-4x1">-
                    Exibindo Postagens
                </h2>
                <p class="mt-3 max-w-2x1 mx-auto text-x1 text-gray-500 sm:mt-4">-
                  ====    lista de postagens   ====
                </p>
            </div>
            <div class="mt-12 max-w-lg mx-auto grid gap-5 lg:grid-cols-3 lg:max-w-none">
                <div v-for="posts in APIData" :key="posts.id" class="flex flex-col rounded-lg shadow-lg overflow-hidden">
                    <router-link :to="{ name: 'MeuSitePost', params: {slug: posts.slug}}"> #aqui recebe os json
                       <p>{{ posts.titulo }}</p>
                    </router-link>
                    {{ posts.conteudo }}
        
                </div>
            </div>
        </div>
    </div>
  </template>

  <script>
    import { getAPI } from '../axios-api'

    export default {

        name: 'MeuSite',
        data () {
            return {
                APIData: []
            }
        },

        created () {

            getAPI.get('/meusite/post/')
                .then(response => {
                    console.log('Post API has recieved data')
                    this.APIData = response.data
                })

                .catch(err => {
                    console.log(err)
                })
        }
    }
  </script>
  '''

  #PostDetail.vue
  '''
<template>
  <div v-if="post" class="p-6 max-w-3xl mx-auto">
    <h1 class="text-3xl font-bold text-gray-900">{{ post.titulo }}</h1>

    <!-- Exibir imagem, se existir -->
    <img
      v-if="post.thumbnail"
      :src="'http://127.0.0.1:8000' + post.thumbnail"
      :alt="post.titulo"
      class="w-full h-64 object-cover my-4 rounded"
    >

    <!-- Conteúdo do post -->
    <div class="text-gray-800 whitespace-pre-line">
        
        {{ post.conteudo }}</div>
  </div>
  <div v-else class="p-6 text-center">
    Carregando...
  </div>
</template>

<script>
import { getAPI } from '../axios-api'

export default {
  name: 'PostDetail',
  data() {
    return {
      post: null
    }
  },
  async created() {
    const slug = this.$route.params.slug
    try {
      const response = await getAPI.get(`/meusite/post/${slug}/`)
      this.post = response.data
    } catch (error) {
      console.error('Erro ao carregar post:', error)
      this.post = null
    }
  }
}
</script>
  '''

#frontend/src/axios-api.js #pra isso serve o serializer
'''
import axios from 'axios'

const getAPI = axios.create({
    baseURL: 'http://127.0.0.1:8000/',
    timeout: 5000,
})

export {getAPI}
'''

#frontend/src/router/index.js
'''
import { createRouter, createWebHashHistory } from 'vue-router'
import HomeView from '../views/HomeView.vue'

const routes = [
  {
    path: '/',
    name: 'home',
    component: HomeView
  },
  {
    path: '/about',
    name: 'about',
    // route level code-splitting
    // this generates a separate chunk (about.[hash].js) for this route
    // which is lazy-loaded when the route is visited.
    component: () => import(/* webpackChunkName: "about" */ '../views/AboutView.vue')
  },
    {
    path: '/meusite',
    name: 'MeuSite',
    // route level code-splitting
    // this generates a separate chunk (about.[hash].js) for this route
    // which is lazy-loaded when the route is visited.
    component: () => import(/* webpackChunkName: "about" */ '../views/MeuSite.vue')
    },
   {
    path: '/meusite/:slug',
    name: 'MeuSitePost',
    // route level code-splitting
    // this generates a separate chunk (about.[hash].js) for this route
    // which is lazy-loaded when the route is visited.
    component: () => import(/* webpackChunkName: "about" */ '../views/PostDetail.vue')
  }
]

const router = createRouter({
  history: createWebHashHistory(),
  routes
})

export default router
'''